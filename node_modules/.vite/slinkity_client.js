import {
  renderComponent
} from "./chunk-CTP33TOX.js";
import "./chunk-P4FSYM4N.js";
import "./chunk-N32X3RIE.js";

// node_modules/slinkity/src/client/toMountPointById.js
function toMountPointById(id) {
  return document.querySelector(`slinkity-react-mount-point[data-s-id="${id}"]`);
}

// node_modules/slinkity/src/client/eagerLoader.js
function eagerLoader({ id, Component = () => null, props = {} }) {
  const mountPoint = toMountPointById(id);
  renderComponent({
    Component,
    mountPoint,
    props
  });
}

// node_modules/slinkity/src/client/lazyLoader.js
var options = {
  rootMargin: "0px 0px 0px 0px",
  threshold: 0
};
function lazyLoader({ id, componentImporter = () => () => null, props = {} }) {
  const observer = new IntersectionObserver(async function(entries) {
    for (const entry of entries) {
      if (entry.isIntersecting) {
        const mountPoint = toMountPointById(id);
        if (!mountPoint.getAttribute("data-s-is-hydrated")) {
          const { default: renderComponent2 } = await import("./renderer-3JX4IPE6.js");
          const { default: Component } = await componentImporter();
          renderComponent2({ mountPoint, Component, props });
          mountPoint.setAttribute("data-s-is-hydrated", true);
        }
      }
    }
  }, options);
  observer.observe(toMountPointById(id));
}

// node_modules/slinkity/src/client/MountPoint.js
var SlinkityReactMountPoint = class extends HTMLElement {
  async disconnectedCallback() {
    const { unmountComponentAtNode } = await import("./react-dom-L2DSHUBZ.js");
    unmountComponentAtNode(this);
  }
};
export {
  SlinkityReactMountPoint as MountPoint,
  eagerLoader,
  lazyLoader,
  renderComponent as renderer,
  toMountPointById
};
//# sourceMappingURL=slinkity_client.js.map
